-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Pepe.Par where
import Pepe.Abs
import Pepe.Lex
import Pepe.ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  ';' { PT _ (TS _ 14) }
  '<' { PT _ (TS _ 15) }
  '<=' { PT _ (TS _ 16) }
  '=' { PT _ (TS _ 17) }
  '==' { PT _ (TS _ 18) }
  '>' { PT _ (TS _ 19) }
  '>=' { PT _ (TS _ 20) }
  'bool' { PT _ (TS _ 21) }
  'break' { PT _ (TS _ 22) }
  'continue' { PT _ (TS _ 23) }
  'else' { PT _ (TS _ 24) }
  'false' { PT _ (TS _ 25) }
  'if' { PT _ (TS _ 26) }
  'int' { PT _ (TS _ 27) }
  'ref' { PT _ (TS _ 28) }
  'return' { PT _ (TS _ 29) }
  'string' { PT _ (TS _ 30) }
  'true' { PT _ (TS _ 31) }
  'void' { PT _ (TS _ 32) }
  'while' { PT _ (TS _ 33) }
  '{' { PT _ (TS _ 34) }
  '||' { PT _ (TS _ 35) }
  '}' { PT _ (TS _ 36) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }

Program :: { (Program ()) }
Program : ListTopDef { Pepe.Abs.PProgram () $1 }
TopDef :: { (TopDef ()) }
TopDef : Type Ident '(' ListArg ')' Block { Pepe.Abs.PFnDef () $1 $2 $4 $6 }
       | Type Ident '=' Expr ';' { Pepe.Abs.PVarInit () $1 $2 $4 }
       | Type Ident ';' { Pepe.Abs.PVarDef () $1 $2 }
ListTopDef :: { [TopDef ()] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }
Arg :: { (Arg ()) }
Arg : Type Ident { Pepe.Abs.PArg () $1 $2 }
    | 'ref' Type Ident { Pepe.Abs.PRefArg () $2 $3 }
ListArg :: { [Arg ()] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Block :: { (Block ()) }
Block : '{' ListStmt '}' { Pepe.Abs.SBlock () (reverse $2) }
Stmt :: { (Stmt ()) }
Stmt : ';' { Pepe.Abs.SEmpty () }
     | Block { Pepe.Abs.SBStmt () $1 }
     | TopDef { Pepe.Abs.STopDef () $1 }
     | Ident '=' Expr ';' { Pepe.Abs.SAss () $1 $3 }
     | Ident '++' ';' { Pepe.Abs.SIncr () $1 }
     | Ident '--' ';' { Pepe.Abs.SDecr () $1 }
     | 'return' Expr ';' { Pepe.Abs.SRet () $2 }
     | 'return' ';' { Pepe.Abs.SRetVoid () }
     | 'if' '(' Expr ')' Block { Pepe.Abs.SCond () $3 $5 }
     | 'if' '(' Expr ')' Block 'else' Block { Pepe.Abs.SCondElse () $3 $5 $7 }
     | 'while' '(' Expr ')' Block { Pepe.Abs.SWhile () $3 $5 }
     | 'break' ';' { Pepe.Abs.SBreak () }
     | 'continue' ';' { Pepe.Abs.SCont () }
     | Expr ';' { Pepe.Abs.SExp () $1 }
ListStmt :: { [Stmt ()] }
ListStmt : {- empty -} { [] } | ListStmt Stmt { flip (:) $1 $2 }
Type :: { (Type ()) }
Type : 'int' { Pepe.Abs.TInt () }
     | 'string' { Pepe.Abs.TString () }
     | 'bool' { Pepe.Abs.TBool () }
     | 'void' { Pepe.Abs.TVoid () }
ListType :: { [Type ()] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
Expr6 :: { Expr () }
Expr6 : Ident { Pepe.Abs.EVar () $1 }
      | Integer { Pepe.Abs.ELitInt () $1 }
      | 'true' { Pepe.Abs.ELitTrue () }
      | 'false' { Pepe.Abs.ELitFalse () }
      | Ident '(' ListExpr ')' { Pepe.Abs.EApp () $1 $3 }
      | String { Pepe.Abs.EString () $1 }
      | '(' Expr ')' { $2 }
Expr5 :: { Expr () }
Expr5 : '-' Expr6 { Pepe.Abs.ENeg () $2 }
      | '!' Expr6 { Pepe.Abs.ENot () $2 }
      | Expr6 { $1 }
Expr4 :: { Expr () }
Expr4 : Expr4 MulOp Expr5 { Pepe.Abs.EMul () $1 $2 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr () }
Expr3 : Expr3 AddOp Expr4 { Pepe.Abs.EAdd () $1 $2 $3 }
      | Expr4 { $1 }
Expr2 :: { Expr () }
Expr2 : Expr2 RelOp Expr3 { Pepe.Abs.ERel () $1 $2 $3 }
      | Expr3 { $1 }
Expr1 :: { Expr () }
Expr1 : Expr2 '&&' Expr1 { Pepe.Abs.EAnd () $1 $3 } | Expr2 { $1 }
Expr :: { (Expr ()) }
Expr : Expr1 '||' Expr { Pepe.Abs.EOr () $1 $3 } | Expr1 { $1 }
ListExpr :: { [Expr ()] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
AddOp :: { (AddOp ()) }
AddOp : '+' { Pepe.Abs.OPlus () } | '-' { Pepe.Abs.OMinus () }
MulOp :: { (MulOp ()) }
MulOp : '*' { Pepe.Abs.OTimes () }
      | '/' { Pepe.Abs.ODiv () }
      | '%' { Pepe.Abs.OMod () }
RelOp :: { (RelOp ()) }
RelOp : '<' { Pepe.Abs.OLth () }
      | '<=' { Pepe.Abs.OLE () }
      | '>' { Pepe.Abs.OGth () }
      | '>=' { Pepe.Abs.OGE () }
      | '==' { Pepe.Abs.OEq () }
      | '!=' { Pepe.Abs.ONe () }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

