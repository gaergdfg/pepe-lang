-- Programs ------------------------------------------------

entrypoints Program ;

PProgram.   Program ::= [TopDef] ;

PFnDef.     TopDef ::= Type Ident "(" [Arg] ")" Block ;

PVarDef.    TopDef ::= Type Ident "=" Expr ";" ;

separator nonempty TopDef "" ;

PArg.       Arg ::= Type Ident ;

PRefArg.    Arg ::= "ref" Type Ident ;

separator   Arg "," ;


-- Statements ----------------------------------------------

SBlock.     Block ::= "{" [Stmt] "}" ;

SEmpty.     Stmt ::= ";" ;

SBStmt.     Stmt ::= Block ;

STopDef.    Stmt ::= TopDef ;

SDecl.      Stmt ::= Type [Item] ";" ;

SNoInit.    Item ::= Ident ;

SInit.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

SIncr.      Stmt ::= Ident "++"  ";" ;

SDecr.      Stmt ::= Ident "--"  ";" ;

SRet.       Stmt ::= "return" Expr ";" ;

SRetVoid.   Stmt ::= "return" ";" ;

SCond.      Stmt ::= "if" "(" Expr ")" Block ;

SCondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block ;

SWhile.     Stmt ::= "while" "(" Expr ")" Block ;

SBreak.     Stmt ::= "break" ";" ;

SCont.      Stmt ::= "continue" ";" ;

SExp.       Stmt ::= Expr ";" ;

separator   Stmt "" ;


-- Types ---------------------------------------------------

TInt.       Type ::= "int" ;

TString.    Type ::= "string" ;

TBool.      Type ::= "bool" ;

TVoid.      Type ::= "void" ;

separator   Type "," ;


-- Expressions ---------------------------------------------

EVar.       Expr6 ::= Ident ;

ELitInt.    Expr6 ::= Integer ;

ELitTrue.   Expr6 ::= "true" ;

ELitFalse.  Expr6 ::= "false" ;

EApp.       Expr6 ::= Ident "(" [Expr] ")" ;

EString.    Expr6 ::= String ;

ENeg.       Expr5 ::= "-" Expr6 ;

ENot.       Expr5 ::= "!" Expr6 ;

EMul.       Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.       Expr3 ::= Expr3 AddOp Expr4 ;

ERel.       Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.       Expr1 ::= Expr2 "&&" Expr1 ;

EOr.        Expr ::= Expr1 "||" Expr ;

coercions   Expr 6 ;

separator   Expr "," ;


-- Operators -----------------------------------------------

OPlus.      AddOp ::= "+" ;

OMinus.     AddOp ::= "-" ;

OTimes.     MulOp ::= "*" ;

ODiv.       MulOp ::= "/" ;

OMod.       MulOp ::= "%" ;

OLth.       RelOp ::= "<" ;

OLE.        RelOp ::= "<=" ;

OGth.       RelOp ::= ">" ;

OGE.        RelOp ::= ">=" ;

OEq.        RelOp ::= "==" ;

ONe.        RelOp ::= "!=" ;


-- Comments ------------------------------------------------

comment     "//" ;

comment     "/*" "*/" ;
